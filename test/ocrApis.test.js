import request from 'supertest';
import express from 'express';
import bodyParser from 'body-parser';
import ocrRoutes from '../src/routes/ocrRoute.js';
import { expect } from 'chai';

const app = express();
app.use(bodyParser.json());
app.use('/ocr', ocrRoutes);

const testImage = "";

describe('OCR API', () => {
    it('should return extracted text from image', async () => {
        const res = await request(app)
            .post('/ocr/get-text')
            .send({ image: `${testImage}` });
        expect(res.status).to.equal(200);
        expect(res.body).to.have.property('text');
    });

    it('should return bounding boxes from image', async () => {
        const res = await request(app)
            .post('/ocr/get-bboxes')
            .send({ image: `${testImage}`, type: 'word' });
        expect(res.status).to.equal(200);
        expect(res.body).to.have.property('elements');
    });

    it('should return 400 for missing image', async () => {
        const res = await request(app)
            .post('/ocr/get-text')
            .send({});
        expect(res.status).to.equal(400);
        expect(res.body).to.have.property('error');
    });

    it('should return 400 for invalid base64 image', async () => {
        const res = await request(app)
            .post('/ocr/get-text')
            .send({ image: 'invalid-base64' });
        expect(res.status).to.equal(400);
        expect(res.body).to.have.property('error');
    });
    
    it('should return 400 for invalid type parameter', async () => {
        const res = await request(app)
            .post('/ocr/get-bboxes')
            .send({ image: `${testImage}`, type: 'invalid' });
        expect(res.status).to.equal(400);
        expect(res.body).to.have.property('error');
    });
});
